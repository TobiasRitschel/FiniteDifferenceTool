function dfFD = ComplexStepDerivatives(fun, x, epsilon, varargin)
% ComplexStepDerivatives  Currently undocumented
%
% REFERENCES
% [1] Al-Mohy, A.H., Higham, N.J., 2010. The complex step approximation to the
% FrÃ©chet derivative of a matrix function. Numerical Algorithms 53, pp. 133-148.
% DOI: 10.1007/s11075-009-9323-y.
% [2] Lai, K.-L., Crassidis, J.L., 2008. Extensions of the first and second
% complex-step derivative approximations. Journal of Computational and Applied
% Mathematics 219(1), pp. 276-293. DOI: 10.1016/j.cam.2007.07.026.
% 
% LINKS
% [A] https://mdolab.engin.umich.edu/wiki/guide-complex-step-derivative-approximation

% Evaluate function
f = feval(fun, x, varargin{:});

% Dimensions
nx = numel(x);
nf = numel(f);

%% First order derivatives
dfFD = zeros(nf, nx);
for j = 1:nx
    % Copy vector
    xp = x;

    % Pertubation
    xp(j) = xp(j) + 1i*epsilon;
    
    % Perturbed function evaluation
    fp = feval(fun, xp, varargin{:});
    
    % Approximation
    dfFD(:, j) = imag(fp(:) / epsilon);

    if(nargout >)
end

%% Second order derivatives
if(nargout > 1)
    epssq = epsilon*epsilon;
    d2fFD = zeros(nx, nx, nf);
    for j = 1:nx
        % Copy vector
        xp = x;

        % Pertubation
        xp(j) = xp(j) + 1i*epsilon;
            
        % Perturbed function evaluation
        fp = feval(fun, x, varargin{:});

        % Approximation
        d2fFD(j, j, :) = (fpp(:) - 2*fpz(:) + f(:)) / epssq;
        
        % Reset pertubation
        x(j) = x(j) - epsilon;
        
        for k = 1:j-1
            % Pertubation
            x(j) = x(j) + epsilon;
            x(k) = x(k) + epsilon;
            
            % Perturbed function evaluation
            fpp = feval(fun, x, varargin{:});
            
            % Reset pertubation
            x(k) = x(k) - epsilon;
             
            % Perturbed function evaluation
            fpz = feval(fun, x, varargin{:});
            
            % Pertubation
            x(k) = x(k) + epsilon;
            x(j) = x(j) - epsilon;
             
            % Perturbed function evaluation
            fzp = feval(fun, x, varargin{:});
            
            % Approximation
            d2fFD(j, k, :) = (fpp(:) - fpz(:) - fzp(:) + f(:)) / epssq;
            d2fFD(k, j, :) = d2fFD(j, k, :);
            
            % Reset pertubation
            x(k) = x(k) - epsilon;
        end
    end
end